version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres-sandbox
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sandbox}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-samar}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sandbox-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  spring-app:
    build: ./Sandbox-Spring
    container_name: spring-boot-app
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started  # Utilise service_started pour éviter le blocage sur healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL:-jdbc:postgresql://postgres-sandbox:5432/sandbox}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD:-samar}
      SERVER_PORT: 8085
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/sandbox-realm
    ports:
      - "8085:8085"
    networks:
      - sandbox-net

  python-api:
    build: ./python-api
    container_name: python-api
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8084:8083"
    networks:
      - sandbox-net

  r-api:
    build:
      context: ./r-api
    ports:
      - "8086:8086"
    depends_on:
      - postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sandbox}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-samar}
      - POSTGRES_HOST=postgres-sandbox
      - POSTGRES_PORT=5432
    networks:
      - sandbox-net

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-sandbox:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: samar
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sandbox-net
    volumes:
      - keycloak-data:/opt/keycloak/data
    healthcheck: {}  # Mappage vide pour désactiver le healthcheck

  frontend:
    build:
      context: ./angular-dashboard
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - spring-app
    ports:
      - "4200:80"
    volumes:
      - ./angular-dashboard/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - sandbox-net

volumes:
  pgdata:
  keycloak-data:

networks:
  sandbox-net:
    driver: bridge